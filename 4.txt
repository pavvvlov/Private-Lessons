I
1. Посочете по какъв начин бихте декларирали шаблонен клас в C#.
- class ClassName<T>
{ 

}

2. Посочете в кой от случаите бихте използвали шаблонни класове?
- Когато се налага да се създават класове, които са сходни по функционалност, а се различават само по типа на обектите, с които работят.

3. Посочете кое е другото название, с което наричаме шаблонните класове в C#.
- Generics


II
1. Дайте пример за шаблонен клас, който да се казва Кутия и тази кутия да може да съхранява всичко. В този клас създайте и един метод, който да добавя елемент в края на редицата.
- class Box<T>
    {
        private List<T> items;

        public Box()
        {
            items = new List<T>();  
        }
        public void Add(T item)
        {
            this.items.Add(item);
        }
    }

2. Дайте пример за шаблонен клас, който да се казва Кутия и тази кутия да може да съхранява всичко. В този клас създайте и един метод, който да проверява и връща като резултат дали даден елемент се съдържа в тази кутия.
- class Box<T>
    {
        private List<T> items;

        public Box()
        {
            items = new List<T>();  
        }

        public bool Contains(T item)
        {
            return this.items.Contains(item);
        }
}

3. Дайте пример за шаблонен клас, който да се казва Кутия и тази кутия да може да съхранява всичко. В този клас създайте и един метод, който да премахва първия елемент от кутията и да връща като резултат неговата стойност.
- class Box<T>
    {
        private List<T> items;

        public Box()
        {
            items = new List<T>();  
        }

        public T Remove()
        {
            T removed = this.items[0];
            this.items.RemoveAt(0);
            return removed;
        }
}


III
1. Имате следния код:

    public class Scale : IComparable
    {
        private var left;
        private var right;

        public Scale(var left, var right)
        {
            this.left = left;
            this.right = right;
        }
        public var GetHavier()
        {
            if (left.CompareTo(right) > 0)
            { return left; }
            else if (left.CompareTo(right) < 0)
            { return right; }
            return default;
        }
    }

Модифицирайте кода,така че Везната да може да сравнява всякакви типове данни. Също така трябва да ограничите Везната, че елементите, които ще  сравнява ще бъдат само сравними типове. 

- public class Scale<T> where T : IComparable<T>//2т
    {
        private T left; //1т
        private T right; //1т

        public Scale(T left, T right)//2т
        {
            this.left = left;
            this.right = right;
        }
        public T GetHavier()
        {
            if (left.CompareTo(right) > 0)
            { return left; }
            else if (left.CompareTo(right) < 0)
            { return right; }
            return default(T);
        }
    }

2. Имате следния код:

        public List<int> CreateList(int item, int count)
        {
            List<int> list = new List<int>();
            for (int i = 0; i < count; i++)
            {
                list.Add(item);
            }
        }

 Модифицирайте кода,така че методът да работи с всякакъв тип данни.

- public List<T> CreateList<T>(T item, int count)//2т
        {
            List<T> list = new List<T>();//2т
            for (int i = 0; i < count; i++)
            {
                list.Add(item);
            }
            return list;//2т
        }



IV
1. Дефинирайте понятието наследяване от обектно-ориентираното програмиране като попълните липсващите думи в текста.
- Наследяването е [основен принцип] от обектно-ориентираното програми­ране. То позволява на един клас да "наследява" [поведение и характеристики] от друг, по-общ клас. 

В .NET и други модерни езици за програмиране един клас може да наследи [само един друг клас].


Класът, който [дава] своите членове на [дъщерния] си клас се нарича [базов] клас. А класът, който [получава] членове от [своя базов клас] - [подклас].

2. Дефинирайте понятието абстракция в обектно-ориентираното програмиране.
- Абстракцията е основен принцип от обектно-ориентираното програмиране.

Абстракцията означава да работим с нещо, което знаем как да използваме, но не знаем как работи вътрешно.

Абстракцията е действие, при което игнорираме всички детайли, които не ни интересуват от даден обект, и разглеждаме само детайлите, които имат значение за проблема, който решаваме.

Абстракцията ни позволява да пишем код, който работи с абстрактни струк­тури от данни (например списък, речник, множество и други). Имайки абстрактния тип данни, ние можем да работим с него през неговия интер­фейс, без да се интересуваме от имплементацията му.

Има два начина за постигане на абстракция:
Интерфейси (100% абстракция)
Абстрактен клас (0% - 100% абстракция)

3. Избройте четирите основни принципа на обектно-ориентираното програмиране.
- капсулация, наследяване, абстракция, полиморфизъм


V
1. Дайте пример за абстракция. Напишете примерен код, който:

Има класовете BaseEmployee, FullTimeEmployee и ContractEmployee.

Условието на задачата е всички работници да имат име, както и  метод CalculateSalary(int workingHours) - който ще изчислява заплатата за работника, като се приема параметър – брой изработени часове. 

Заплатата на FullTimeEmployee се изчислява по формулата: 250 + workingHours*10.80.

А заплатата на ContractEmployee по формулата: 250 + workingHours*20.

Спазвайте принципа за абстракция в обектно-ориентираното програмиране. 

- abstract class BaseEmployee
    {
        public string Name { get; set; }
        public abstract double CalculateSalary(int workingHours);
    }

    class FullTimeEmployee : BaseEmployee
    {
        public override double CalculateSalary(int workingHours)
        {
            return 250 + workingHours * 10.80;
        }
    }

    class ContractEmployee : BaseEmployee
    {
        public override double CalculateSalary(int workingHours)
        {
            return 250 + workingHours * 20;
        }
    }
 
2. Дайте пример за наследяване в C#. 

Имате Котка и Куче. Те обаче трябва да могат да се хранят. Котката трябва да казва "Meow", а Кучето - "Bark".

Реализирайте го чрез програмен код на C#.

- class Animal
    {
        public void Eat()
        {
            Console.WriteLine("Eat...");
        }
    }

    class Dog : Animal
    {
        public void Bark()
        {
            Console.WriteLine("Bark...");
        }
    }

    class Cat : Animal
    {
        public void Meow()
        {
            Console.WriteLine("Meow...");
        }
    }


VI
1. Имате абстрактен клас и обикновен клас. Открийте и свържете коя от характеристиките се отнася за абстрактния клас и коя за не абстрактен клас.
- Не можем да създаваме инстанции. [абстрактен клас]

Може да има само абстрактни членове на класа. [за нито един от двата]

Могат да дефинират методи без тяло (без имплементация). [абстрактен клас]

Можем да създаваме инстанции. [обикновен клас]

Може да има само не-абстрактни членове на класа. [обикновен клас]

Не могат да дефинират методи без тяло (имплементация). [обикновен клас]

Съдържа ключовата дума abstract пред ключовата дума class. [абстрактен клас]

Може да има абстрактни и не-абстрактни членове на класа. [абстрактен клас]

Не съдържа ключовата дума abstract пред ключовата дума class. [обикновен клас]

2. Свържете кои от характеристиките се отнасят за абстракцията, кои за енкапсулацията.
- Получава се чрез модификаторите за достъп (private, public, protected, internal) [енкапсулация]

Постига се чрез интерфейси и абстрактни класове. [абстракция]

Процес на скриване на подробностите на имплементацията и показване само на функционалностите към потребителя. [абстракция]

Използва се, за  да скрива кода и информацията в един компонент, за да я защити от външния свят. [енкапсулация]



VII
1. Посочете кое от изброените е дефиниция на метод, който може да бъде презаписан в клас наследник.
- Виртуален метод.

2. Посочете по какъв начин указваме на даден метод от базовия клас, че искаме да презапишем неговото поведение.
- Чрез ключовата дума virtual.

3. Посочете по какъв начин в C# можем да укажем, че искаме да подменим (препокрием) виртуален метод.
- Чрез ключовата дума override поставена на методи в наследниците.



VIII
1. Обяснете основните разлики между презареждане и презаписване на методи.
- Методи с едно и също име, но различни сигнатури. [презареждане на методи]
Може да се случи в същия клас или в негов подклас. [презареждане на методи]
Може да се случи в подкласовете. [презаписване на методи]
Трябва да има същия тип на връщана стойност. [презаписване на методи]
При компилиране, според подадените параметри компилатора определя кой метод точно ще изпълни. [презареждане на методи]
Модификатора за достъп не може да бъде по-ограничаващ. [презаписване на методи]

2. Имате зададена следната схема:
схема.....
Методът ExplainMyself ще бъде презаписан или презареден? 

Запишете отговора си в полето и обяснете защо?

- Методът ще бъде презаписан, защото се използва в подкласовете и има една и съща сигнатура.



IX
1. Дайте пример чрез код на C# за това как и къде бихте използвали презаписване на методи. 

Например имате класовете Animal и Dog. Имате и един единствен метод MakeTrick(), който трябва да отпечатва на конзолата за всички животни, че по подразбиране не могат да правят никакъв трик ("No trick!"). Само и единствено кучето умее трика да подава лапа ("Give a paw!"). 

Реализирайте примера чрез код на C#.

-  class Animal
{
        public virtual void MakeTrick()
        {
            Console.WriteLine("No trick...");
        }
}
class Dog : Animal
{
        public override void MakeTrick()
        {
            Console.WriteLine("Give a paw...");
        }
}

2. Дайте пример чрез код на C# за това как и къде бихте използвали презареждане на методи. 
-  class MathOperations
    {
        public int Add(int a, int b)
        {
            return a + b;   
        }
        public int Add(int a, int b,int c)
        {
            return a + b + c;
        }
    }



X
1. Посочете кое от изброените твърдение е вярно за интерфейсите в C#.
- Предоставя договор, определящ как да се създаде обект, без да се интересува от спецификата на това как обекта ще прави нещата.
  Това е референтен тип и включва само абстрактни членове като събития, методи, свойства и т.н. и няма реализации за нито един от своите членове.

2. Посочете кое от изброените твърдение е вярно за класовете в C#.
- Можем да създаваме инстанции.
  Описва състоянието и поведението на обектите


XI
1. Посочете кое от изброените твърдение е вярно за интерфейсите в C#.
- Предоставя договор, определящ как да се създаде обект, без да се интересува от спецификата на това как обекта ще прави нещата.
  Това е референтен тип и включва само абстрактни членове като събития, методи, свойства и т.н. и няма реализации за нито един от своите членове.

2. Посочете кое от изброените твърдение е вярно за класовете в C#.
- Можем да създаваме инстанции.
  Описва състоянието и поведението на обектите



XII
1. Открийте разликите между клас и интерфейс. Кои от изброените твърдения се отнасят за класовете в C#, кои за интерфейсите?
- Има както дефиниция, така и реализация. [клас]

Има само дефиниция. [интерфейс]

Не може да бъде инстанциран. [интерфейс]

Може да бъде инстанциран. [клас]

Може да съдържа членове, методи, заедно с дефиниция и реализация. [клас]

Набор от дефиниции, които трябва да се приложат. [интерфейс]

2. Свържете кои от характеристиките се отнасят за абстрактните класове, кои за интерфейсите.
- Може да наследи само един абстрактен клас. [абстракция]

Могат да предоставят целия код и/или само детайлите, които трябва да се презапишат. [абстракция]

Може да имплементира няколко интерфейса. [и за двете]

Може да съдържа модификатори за достъп. [абстракция]

Не може да предоставя никакъв код, предоставя само описание. [интерфейси]                        

Нямат модификатори за достъп. Всичко е публично по подразбиране. [интерфейси]

3. Свържете кои от характеристиките се отнасят за абстрактните класове, кои за интерфейсите.
- Може да притежава полета и константи. [абстрактни класове]

Е по-добър избор, ако множество имплементации споделят само сигнатурата на методите и нищо друго. [интерфейси]

Не поддържа полета. [интерфейси]

Е по-добър избор, ако множество имплементации са от сходен вид и имат общо поведение или статут. [абстрактни класове]

Ако добавим нов метод, то имаме опцията да създадем имплементация по подразбиране и така съществуващият код ще може да работи коректно. [абстрактни класове]

Ако добавим нов метод, то трябва да проследим всичките му имплементации и да дефинираме имплементация за новия метод. [интерфейси]



XIII
1. Открийте разликите между клас и интерфейс. Кои от изброените твърдения се отнасят за класовете в C#, кои за интерфейсите?
- Има както дефиниция, така и реализация. [клас]

Има само дефиниция. [интерфейс]

Не може да бъде инстанциран. [интерфейс]

Може да бъде инстанциран. [клас]

Може да съдържа членове, методи, заедно с дефиниция и реализация. [клас]

Набор от дефиниции, които трябва да се приложат. [интерфейс]

2. Свържете кои от характеристиките се отнасят за абстрактните класове, кои за интерфейсите.
- Може да наследи само един абстрактен клас. [абстракция]

Могат да предоставят целия код и/или само детайлите, които трябва да се презапишат. [абстракция]

Може да имплементира няколко интерфейса. [и за двете]

Може да съдържа модификатори за достъп. [абстракция]

Не може да предоставя никакъв код, предоставя само описание. [интерфейси]                        

Нямат модификатори за достъп. Всичко е публично по подразбиране. [интерфейси]

3. Свържете кои от характеристиките се отнасят за абстрактните класове, кои за интерфейсите.
- Може да притежава полета и константи. [абстрактни класове]

Е по-добър избор, ако множество имплементации споделят само сигнатурата на методите и нищо друго. [интерфейси]

Не поддържа полета. [интерфейси]

Е по-добър избор, ако множество имплементации са от сходен вид и имат общо поведение или статут. [абстрактни класове]

Ако добавим нов метод, то имаме опцията да създадем имплементация по подразбиране и така съществуващият код ще може да работи коректно. [абстрактни класове]

Ако добавим нов метод, то трябва да проследим всичките му имплементации и да дефинираме имплементация за новия метод. [интерфейси]



XIV, XV, XVI
1. Дефинирайте понятието полиморфизъм в обектно-ориентираното програмиране като попълните липсващите думи в текста.
- Полиморфизмът в обектно-ориентираното програмиране представлява свойството на обектите от един и същи [тип] да имат един и същи [интерфейс], но с [различна реализация] на този [интерфейс]. „Един [интерфейс], [множество от различни реализации]“. Чрез полиморфизма се постига по-голяма [абстракция] и по-лесно [повторно излопзване] на кода.

2. Посочете какви са приликите и разликите между полиморфизъм и абстракция в обектно-ориентираното програмиране като поставите липсващите думи в текста.
- Полиморфизмът може много да напомня на абстракцията, но в програми­рането се свързва най-вече с [пренаписването(override)] на методи в [наследените класове] с цел [промяна на оригиналното им поведение], насле­дено от базовия клас. Абстракцията се свързва със [създаването на интерфейс на компонент] или функционалност.

3. Дефинирайте термина полиморфизъм в обектно-ориентираното програмиране, като поставите липсващите думи в текста.
- Терминът полиморфизъм в обектно-ориентираното програмиране определя, че [едни и същи(еднотипни)] действия се реализират по [различен начин] в зависимост от обектите, върху които се прилагат. Такива действия се наричат [полиморфични]. За да се реализира [полиморфно действие], класовете на обектите, върху които се прилага това действие, трябва да имат [общ корен] т.е. да бъдат производни на [един и същи клас].

4. Посочете видовете полиморфизъм в .NET.
- Полиморфизъм по време на компилиране.
  Полиморфизъм по време на изпълнение. 

5. Посочете видовете полиморфизъм в .NET.
- Статичен.
  Динамичен.

6. Имате даден следния код:
   class AddClass
        {
            public void Add(int a, int b)
            {
                int r = a + b;
                Console.WriteLine("Add two integer Number = " + r);
            }
            public void Add(string x, string y)
            {
                Console.WriteLine("Concatenation two string = " + x+y);
            }
        }
Опишете кой от видовете полиморфизъм е използван в примера по-горе.
- Полиморфизъм по време на компилиране.

7. Имате даден следния код:
  class ClassA
        {
            public virtual void Show()
            {
                Console.WriteLine("This is Show from ClassA");
            }
        }

        class ClassB : ClassA
        {
            public override void Show()
            {
                Console.WriteLine("This is Show from ClassB");
            }
        }

        class ClassC : ClassA
        {
            public override void Show()
            {
                Console.WriteLine("This is Show from ClassC");
            }
        }
Опишете кой от видовете полиморфизъм е използван в примера по-горе.

- Полиморфизъм по време на изпълнение.



XVII
1. Открийте липсващите думи и свържете правилно изреченията:
- При дефиниране на обекти от базови и производни класове е възможно на обект от [базов клас] да се присвои обект от [производен клас] т.е. обект от [производен клас] може да служи за инициализация на обект (референция) от [базов клас].

Възможно е също да се осъществи обръщение към обект чрез променлива от друг тип, ако използвания тип е клас, намиращ се на [по-високо] ниво в йерархията на наследяване. Обратното [не е възможно].

2. Имате следния пример: 

клас Circle е производен на абстрактният клас Figure. 

Демонстрирайте начините, по които е възможно да се декларира референция на някой от класовете, която да сочи обект от клас Circle:
- Figure c = new Circle();

Circle c = new Circle();

3. Открийте липсващите думи в текста:
Възможността референция към [базов клас] да сочи обект както от базовия, така и обект от някой от производните класове е в основата на реализацията на [полиморфизма] в езика C#.

Кои от следните примери потвърждават това правило, ако имате следната йерархия class Cat : class Animal ?

Cat cat  = new Animal(); [не]

Animal animal = new Animal(); [да]

Animal animal = new Cat(); [да]



XVIII
1. По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.	-	Тоталитрано дистопично общество
-   internal interface IBuyer

    {

        void BuyFood();

        int Food { get; }

    }



internal class Citizen : Community

    {

        private string birthdate;



        public string Birthdate { get => this.birthdate; set => this.birthdate = value; }



        public Citizen(string id, string name, int age, string birthdate) : base(id, name, age)

        {

            this.Birthdate = birthdate;

        }



        public override void BuyFood()

        {

            this.Food += 10;

        }



        public override string ToString()

        {

            return base.ToString() + $"Birthdate {this.Birthdate} Food: {this.Food}";

        }

    }



internal abstract class Community : IIdentifiable, IPersonable, IBuyer

    {

        private string id;

        private string name;

        private int age;

        private int food;



        public string Id { get => this.id; set => this.id = value; }

        public string Name { get => this.name; set => this.name = value; }

        public int Age { get => this.age; set => this.age = value; }

        public int Food { get => this.food; set => this.food = value; }



        protected Community(string id, string name, int age)

        {

            this.Id = id;

            this.Name = name;

            this.Age = age;

        }



        public abstract void BuyFood();



        public override string ToString()

        {

            return $"ID:{this.Id} {this.GetType().Name} Name: {this.Name} Age {this.Age} ";

        }

    }



 internal interface IIdentifiable

    {

        string Id { get; }

    }



internal interface IPersonable



    {

        string Name { get; }

        int Age { get; }



    }



internal class Program

{

    static void Main(string[] args)

    {

        int n = int.Parse(Console.ReadLine());



        Dictionary<string, Community> community = new Dictionary<string, Community>();



        for (int i = 0; i < n; i++)

        {

            string[] input = Console.ReadLine().Split();

            Community entity = CreateEntity(input);

            community.Add(input[0], entity);

        }



        string id = Console.ReadLine();

        while (id != "End")

        {

            if (community.ContainsKey(id))

            {

                community[id].BuyFood();

                Console.WriteLine(community[id]);

            }

            else

            {

                Console.WriteLine($"Entity with {id} does not exist!");

            }

            id = Console.ReadLine();

        }



        int totalFood = community.Sum(v => v.Value.Food);

        Console.WriteLine("TotalFood:" + totalFood);

    }



    public static Community CreateEntity(string[] info)

    {

        Community entity = null;

        string id = info[0];

        if (id.StartsWith("R"))

        {

            entity = new Rebel(id, info[1], int.Parse(info[2]), info[3]);

        }

        else if (id.StartsWith("C"))

        {

            entity = new Citizen(id, info[1], int.Parse(info[2]), info[3]);

        }

        return entity;

    }

}





internal class Rebel : Community

    {

        private string group;



        public string Group { get => this.group; set => this.group = value; }



        public Rebel(string id, string name, int age, string group) : base(id, name, age)

        {

            this.Group = group;

        }



        public override void BuyFood()

        {

            this.Food += 5;

        }



        public override string ToString()

        {

            return base.ToString() + $"Group {this.Group} Food: {this.Food}";

        }



    }





2. Създайте следната йерархия от класове и интерфейси.
 За ваше удобство ще ви бъде предоставен скелет на задачата, който обаче е непълен/неработещ/некоректен. Предоставеният скелет трябва да се приведе в работещ вид.
- 

2. 