I,II,III,IV

1. Дефинирайте понятието блокираща операция.
 - Блокираща операция наричаме такава операция, която възпрепятства продължението на изпълнение на програмата до приключване на съответната операция.

2. Дефинирайте понятието конкурентност.
 - Способност на програмата за изпълнение на набор от операции едновременно.

3. Опишете изпълнението на следния програмен фрагмент. В какъв ред се изпълняват отделните програмни единици?
   static int Min(int a, int b, int c)
{
    return Math.Min(Math.Min(a, b), c);
}
static int Max(int a, int b, int c)
{
    return Math.Max(Math.Max(a, b), c);
}

static void Main(string[] args)
{
    Thread t1 = new Thread(() => Console.WriteLine(Min(3, 8, 2)));
    Thread t2 = new Thread(() => Console.WriteLine(Min(4, 3, 1)));
    t1.Start();
    t2.Start();
}

 - Програмата започва изпълнението си от Main метода. В него се създават обекти за двете нишки и нишките се стартират.

Едната от нишките извиква Min(), а другата метода Max(). Редът на извикванията зависи от .NET и управлението на нишките на ниво процес.

4. Опишете изпълнението на следния програмен фрагмент. В какъв ред се изпълняват отделните програмни единици?
   static int Sum(int a, int b)
{
    return a + b;
}
static int Max(int a, int b)
{
    return (a > b ? a : b);
}

static void Main(string[] args)
{
    Thread t1 = new Thread(() => Console.WriteLine(Sum(5, 3)));
    Thread t2 = new Thread(() => Console.WriteLine(Max(5, 3)));
    t1.Start();
    t2.Start();
}

 - Програмата започва изпълнението си от Main метода. В него се създават обекти за двете нишки и нишките се стартират.

Едната от нишките извиква Sum(), а другата метода Max(). Редът на извикванията зависи от .NET и управлението на нишките на ниво процес.

5. Опишете изпълнението на следния програмен фрагмент. В какъв ред се изпълняват отделните програмни единици?
 static int Sum(int a, int b)
{
    return a + b;
}

static int Multiply(int a, int b)
{
    return a * b;
}

static void Main()
{
    int a = 5, b = 10;
    Console.WriteLine(Sum(a, b));
    Console.WriteLine(Multiply(a, b));
}

 - Програмата започва изпълнението си от Main метода. В него се създават двете променливи a и b с начални стойности съответно 5 и 10.

След това се извиква метод Sum с аргументи а и b. Методът се изпълнява и връща сбора от получените от него параметри в Main метода. Върнатия резултат се извежда на екрана.

След това се извиква метод Multiply с аргументи а и b. Методът се изпълнява и връща произведението от получените от него параметри в Main метода. Върнатия резултат се извежда на екрана.

След това програмата приключва своето действие. Всички действия в програмата се изпълняват на главната нишка на процеса.

6. Дефиницията „Абстракция на програма в режим на изпълнение” е на понятието:
 - процес

7. Дефиницията „Самостоятелна редица от програмни инструкции, които се изпълняват последователно” е на понятието
 - нишка

8. Изберете дефиницията на понятието конкурентност:
 - Изпълнение на набор от операции едновременно

9. Изберете дефиницията на понятието процес
 - Процесът е абстракция на програма в режим на изпълнение

10. Изберете дефиницията на понятието нишка.
 - Самостоятелна редица от програмни инструкции, които се изпълняват последователно
 
11. Изберете липсващата фраза, така че да дефинирате правилно понятието:
______________________________ наричаме такава операция, която възпрепятства продължението на изпълнение на програмата до приключване на съответната операция.

 - блокираща

12. Кое от понятията е дефинирано в текста по-долу?

Изпълнение на набор от операции едновременно.
 - нишка


V
1. Дайте пример за поне два вида блокиращи операции.
 - Блокиращи операции могат да бъдат например входно-изходните операции, интензивните изчисления или достъп до мрежови ресурси.

2. Дайте пример за поне два вида конкурентност.
 - Многопоточност (многонишковост) - форма на конкурентност, при която програмата се изпълнява с множество потоци (нишки).

Асинхронно програмиране - форма на конкурентност, при която дадена задача се изпълнява без да блокира останалите операции. При завършването на задачата програмата се информира чрез обратно извикване (callback) или с 
използването на task/promise обекти.

3. Какви са приликите и разликите между асинхронно програмиране и многонишковото програмиране?
 - В .NET Асинхронното програмиране позволява изпълнението на операции без това да води до блокиране на останалата част от програмата. За тази цел при стартиране на асинхронната операция, програмата продължава да изпълнява 
останалите команди, но се задава фрагмент за обратно извикване (callback) или се използва специален обект, който се изчаква (awaitable). Асинхронните операции могат да връщат стойности.


VI,VII,VIII,IX

1. Опишете връзката между процес и нишка
 - Процесът може да има множество нишки. Те споделят общи ресурси и са част от процеса. Всеки процес има поне една нишка - главна.

2. Опишете връзката между процес и нишка
 - Процесът може да има множество нишки. Те споделят общи ресурси и са част от процеса. Всеки процес има поне една нишка - главна.

3. Кое от следните е метод за прекъсване на работата на Thread обект?
 - Suspend

4. Кое от следните НЕ е метод на Thread обекта.
 - Stop

5. Кое от следните НЕ е свойство на нишка?
 - Value

6. Кое от следните НЕ е състояние на нишка?
 - „в изчакване” (Awaiting)

7. Между процесите и нишките съществува връзка. Кое от тези твърдения описва вярно тази връзка?
 - множество нишки на различни програми може да бъдат изпълнявани от даден процес

8. На кой от редовете се създава правилно обект за нишка, който изпълнява метод MyMethod без параметри?
 - Thread thread = new Thread(MyMethod);

9. Посочете вярното твърдение за нишка
 - Нишките могат да се изпълняват конкурентно

10. Посочете грешното твърдение за нишка.
 - Нишките имат самостоятелни ресурси

11. Свойството IsBackgroundThread на нишка показва:
 - дали работи на преден или заден план

12. Свойството ThreadState на нишка показва:
 - състоянието на нишката


X

1. Обобщете чрез попълване на празните места в диаграмата жизнения цикъл на нишката.
 - Заявка -> създаване на обект -> заделен ресурс -> изпълнение -> освобождаване на ресурс

2. Обобщете чрез попълване на празните места в диаграмата жизнения цикъл на нишката. (НЯКАКВА СХЕМА ИМА)
 - Стартирана (Started); В изъплнение (Running); Временно спряна (Suspended); Мъртва (Dead);

3. Попълнете липсващите места в текста с подходящи думи, така че да опишете връзката между процес и нишка.

А. [[1] - Процесът] може да притежава многобройни Б. [[2] - Нишки]. Те В. [[3] - споделят общи ] ресурси. Програма, която може да изпълнява едновременно няколко редици от програмни инструкции наричаме Г. [[4] - многонишкова програма].


XI,XII,XIII

1. Демонстрирайте синхронизацията на нишки, чрез правилно прилагане на lock операторите, така че програмата да не изпада в безкраен цикъл и да се избягва проблема „мъртва хватка“ (deadlock).
   private static object brush = new object();
private static object canvas = new object();

public static void Artist1(int n)
{
    lock (brush)
    {
        Thread.Sleep(1000);
        lock (canvas)
        {
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine(new String('*', i));
            }
        }
    }
}

public static void Artist2(int n)
{
    lock (canvas)
    {
        Thread.Sleep(1000);

        lock (brush)
        {
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine(new String('$', i));
            }
        }
    }
}

public static void Main(string[] args)
{
    Thread t1 = new Thread(() => Artist1(10));
    Thread t2 = new Thread(() => Artist2(10));
    t1.Start();
    t2.Start();
}

 - В метод Artist2 lock-овете трябва да се налагат в същия ред:
  Public static void Artist2(int n)
{
    lock (brush)
    {
        Thread.Sleep(1000);

        lock (canvas)
        {
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine(new String('$', i));
            }
        }
    }
}

2. Демонстрирайте синхронизацията на нишки, чрез създаване на синхронизиращ обект и оператора lock в кода по-долу, така че стойността на брояча да е правилна и да се избягва проблема „състояние на гонка“ (race condition).

class Counter {

  public int Count { get; private set; }

  public void Increment() {

    Count++;

  }

  public void Decrement() {

    Count--;

  }

  static void TestCounter(Counter c)

  {

     for(int i = 0; i < 10000; i++)

     {

       c.Increment();

       c.Decrement();

     }

  }

}

class Program {

  public static void Main(string[] args) {

    Counter c = new Counter();

    Thread t1 = new Thread( () => TestCounter(c) );

    Thread t2 = new Thread( () => TestCounter(c) );

    Thread t3 = new Thread( () => TestCounter(c) );

    t1.Start();

    t2.Start();

    t3.Start();

    t1.Join();

    t2.Join();

    t3.Join();

  }

}


 - class Counter {

  private readonly object _sync = new Object();

  public int Count { get; private set; }

  public void Increment() {

    lock (_sync)
    {
       Count++;
    }

  }

  public void Decrement() {

    lock (_sync)
    {
      Count--;
    }

  }

}

class Program {

   static void TestCounter(Counter c)

  {

     for(int i = 0; i < 10000; i++)

     {

       c.Increment();

       c.Decrement();

     }

  }

  public static void Main(string[] args) {

    Counter c = new Counter();

    Thread t1 = new Thread( () => TestCounter(c) );

    Thread t2 = new Thread( () => TestCounter(c) );

    Thread t3 = new Thread( () => TestCounter(c) );

    t1.Start();

    t2.Start();

    t3.Start();

    t1.Join();

    t2.Join();

    t3.Join();
   
    Console.WriteLine($"Total Count: {c.Count}");

  }

}

3. Демонстрирайте създаването и стартирането на нишка, която изпълнява метода по-долу. Включете целия необходим код в отговора, в това число class Program и Main метод.


static void Count() {

    for(int i = 5; i >= 0; i--) {

        Console.WriteLine(i);

    }

}

 - static void Count()
{
    for (int i = 5; i >= 0; i--)
    {
        Console.WriteLine(i);
    }
}

static void Main()
{
    Thread countThread = new Thread(Count);
    countThread.Start();
}

4. Демонстрирайте създаването и стартирането на нишка, която изпълнява метода по-долу. Включете целия необходим код в отговора, в това число class Program и Main метод.


static void Count(int n) {

    for(int i = n; i >= 0; i--) {

        Console.WriteLine(i);

    }

}

 - static void Count(int n)
{
    for (int i = n; i >= 0; i--)
    {
        Console.WriteLine(i);
    }
}

static void Main()
{
    Thread countThread = new Thread(() => Count(5));
    countThread.Start();
}

5. Демонстрирайте създаването и стартирането на нишка, която изпълнява метода по-долу. Включете целия необходим код в отговора, в това число class Program и Main метод.


static void SayHello() {

    Console.WriteLine("Hello");

}

 - static void SayHello()
{
    Console.WriteLine("Hello");
}

static void Main(string[] args)
{
    Thread t1 = new Thread(SayHello);
    t1.Start();
}

6. Демонстрирайте създаването и стартирането на нишка, която изпълнява метода по-долу. Включете целия необходим код в отговора, в това число class Program и Main метод.


static void PrintBunny() {

    Console.WriteLine(@"|)___(|");
    Console.WriteLine(@"(o . o)");
    Console.WriteLine(@"(_).(_)");

}

 - static void PrintBunny() {

    Console.WriteLine(@"|)___(|");
    Console.WriteLine(@"(o . o)");
    Console.WriteLine(@"(_).(_)");

}

static void Main()
{
    Thread t1 = new Thread(PrintBunny);
    t1.Start();
}

7. Демонстрирайте създаването и стартирането на нишка, която изпълнява метода по-долу. Включете целия необходим код в отговора, в това число class Program и Main метод.


static void SayHello(string name) {

    Console.WriteLine($"Hello, {name}!");

}

 - static void SayHello(string name)
{
    Console.WriteLine($"Hello, {name}!");
}

static void Main(string[] args)
{
    Thread t1 = new Thread(() => SayHello("Maria"));
    t1.Start();
}

8. Демонстрирайте създаването и стартирането на нишка, която изпълнява метода по-долу. Включете целия необходим код в отговора, в това число class Program и Main метод.


static void PrintTriangle(int n) {

    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= i; j++)
        {
           Console.WriteLine($"{j} ");
        }
        Console.WriteLine();
    }

}

 - static void PrintTriangle(int n) {

    for(int i = 1; i <= n; i++)
    {
        for(int j = 1; j <= i; j++)
        {
           Console.WriteLine($"{j} ");
        }
        Console.WriteLine();
    }

}

static void Main()
{
    Thread t1 = new Thread(() => PrintTriangle(3));
    t1.Start();
}


XIV
1. Кой е проблемът, който отговаря на посоченото описание?
Това е самоизключващо се блокиране. Такова състояние може да възникне, ако нишка А засече, че нишка Б се опитва да заеме ресурс и се опита да го освободи. От своя страна при получаване на ресурса нишка Б също се опитва да го освободи отново за нишка А. Това може да продължи до безкрайност.

 - Жива хватка (livelock)

2. Кой е проблемът, който отговаря на посоченото описание?
Това състояние на нишка е свързано с ресурсите, които получават нишките. Нека имаме нишка А, която използва общ ресурс с друга нишка, но често го задържа за себе си за по-дълго време. Нишка Б получава ресурса на цената на дълго чакане.

 - Гладуване (starvation)

3. Кой е проблемът, който отговаря на посоченото описание?
Проблемът може да възникне по следния начин:

Нишка 1 заема ресурс А;

Нишка 2 заема ресурс B;

Нишка 1 опитва да заеме ресурс B;

Нишка 2 опитва да заеме ресурс А.

Тъй като ресурсите А и Б вече се използват съответно от нишка 1 и нишка 2, при опит на другата нишка да заеме ресурс, то тя трябва да изчака. Това води до взаимно изчакване и на двете нишки, което може да продължи безкрайно. Проблемът е възможно да възникне и между по-голям брой ресурси.

 - Мъртва хватка (dead lock)



XV
1. Дайте пример за ситуация, в която възниква проблем „състояние на гонка“ (race condition)?
 - Състоянието на гонка настъпва, когато две или повече нишки се опитат да достъпят общ ресурс. Този общ ресурс може да бъде, например променлива, файл или поле в база данни. Ако нишките не са синхронизирани, това може да доведе до неправилна промяна на ресурса;

2. Дайте пример за ситуация, в която възниква проблем „гладуване“ (starvation)?
 - Състоянието на гладуване на нишките настъпва, когато една от нишките изисква повече ресурси. Така за останалите нишки е възможно да не достигат ресурси или ако все пак ги получат, това да се случи на цената на по-голямо чакане. Ако изискванията на нишките откъм ресурси се разпределят равномерно, то този проблем не се наблюдава;


XVI,XVII
1. Открийте какъв проблем при употреба на нишки се наблюдава в примерния програмен фрагмент и предложете решение.
   private static object _lock1 = new object();
   private static object _lock2 = new object();
   .....more code


 - Показаният проблем е мъртва хватка (deadlock). За справяне с проблема зависимите ресурси могат да се алокират в една и съща последователност или да се използват таймери;

2. Открийте какъв проблем при употреба на нишки се наблюдава в примерния програмен фрагмент и предложете решение.
   static void PrintBunny()
   .....more code

 - Нишката не се стартира. Проблемът се поправя, като се извика метод .Start() за обекта на нишката;

3. Открийте какъв проблем при употреба на нишки се наблюдава в примерния програмен фрагмент.
   private static Stack<int> s  = new Stack<int>();
   ....more code

 - Показаният проблем е състояние на гонка (race condition). За справяне с проблема трябва да се използва lock върху обекта на стека;

4. Открийте какъв проблем при употреба на нишки се наблюдава в примерния програмен фрагмент.
   private static Queue<int> q  = new Queue<int>();
   ...more code

 - Показаният проблем е състояние на гонка (race condition). За справяне с проблема трябва да се използва lock върху обекта на стека;

5. Открийте какъв проблем при употреба на нишки се наблюдава в примерния програмен фрагмент.
   static void PrintNUmbers()
   ...more code

 - В примерния код нишката се стартира във фонов режим. Тъй като главната нишка не извършва никакви действия програмата приключва без да изчаква завършването на дъщерната нишка. За справяне с проблема и наблюдение на действието на метода, който се очаква нишката да изпълни, трябва тя да не е във фонов режим, т.е. да се премахне реда t1.IsBackgroundThread = false;



XIII
1. По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
  using System;

using System.Collections.Generic;

using System.Linq;

using System.Threading;


namespace ExampleThread1

{

class Program

[[1] - {]

[[2] - static] void FindMin(int[] arr)

{

[[3] - int min = arr[0];]

[[4] - for (int i = 0; i < arr.Length; i++)]

{

if ([[5] - arr[i] < min])

{

min = [[6] - arr[i]];

}

}

Console.WriteLine($"Minimum: {min}");

}

static void FindMax([[7] - int[] arr])

{

int max = arr[0];

for (int i = 0; i < arr.Length; i++)

{

if (arr[i] > max)

{

[[8] - max = arr[i]]

}

}

Console.WriteLine($"Maximum: {max}");

}

static void Main(string[] args)

{

int n = int.Parse(Console.ReadLine());

int[] arr = new int[n];

Random r = new Random();

for (int i = 0; i < n; i++)

{

arr[i] = r.Next(-100, 100);

}


[[9] - Thread t1 = new Thread(() => FindMin(arr));]

Thread t2 = new Thread(() => FindMax(arr));

t1.Start();

t2.Start();

[[10] - }]

}

}


2. По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
using System;

using System.Collections.Generic;

using System.Linq;

using System.Threading;


namespace ExampleThread1

{

class Program

[[1] - {]

[[2] - static] void FindSum(int[] arr)

{

[[3] - int sum = 0;]

[[4] - for (int i = 0; i < arr.Length; i++)]

{

[[6] - sum += arr[i];]

}



Console.WriteLine($"Sum: {sum}");

}

static void FindZero([[7] - int[] arr])

{

[[5] - int zeroes = 0;]

for (int i = 0; i < arr.Length; i++)

{

if (arr[i] == 0)

{

[[8] - max = arr[i];]

}

}

Console.WriteLine($"Zeroes: {zeroes}");

}

static void Main(string[] args)

{

int n = int.Parse(Console.ReadLine());

int[] arr = new int[n];

Random r = new Random();

for (int i = 0; i < n; i++)

{

arr[i] = r.Next(-100, 100);

}


[[9] - Thread t1 = new Thread(() => FindSum(arr));]

Thread t2 = new Thread(() => FindZero(arr));

t1.Start();

t2.Start();

[[10] - }]

}

}


3. По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
using System;

using System.Collections.Generic;

using System.Linq;

using System.Threading;


namespace ExampleThread1

{

class Program

[[1] - {]

[[2] - static] void FindEven(int[] arr)

{

[[3] - int countEven = 0;]

[[4] - for (int i = 0; i < arr.Length; i++)]

{

[[6] - if(arr[i] % 2 == 0) { countEven++; }]

}



Console.WriteLine($"Even: {countEven}");

}

static void FindOdd([[7] - int[] arr])

{

[[5] - int countOdd = 0;]

for (int i = 0; i < arr.Length; i++)

{

if (arr[i] % 2 != 0)

{

[[8] - countOdd++;]

}

}

Console.WriteLine($"Odd: {countOdd}");

}

static void Main(string[] args)

{

int n = int.Parse(Console.ReadLine());

int[] arr = new int[n];

Random r = new Random();

for (int i = 0; i < n; i++)

{

arr[i] = r.Next(-100, 100);

}


[[9] - Thread t1 = new Thread(() => FindEven(arr));]

Thread t2 = new Thread(() => FindOdd(arr));

t1.Start();

t2.Start();

[[10] - }]

}

}