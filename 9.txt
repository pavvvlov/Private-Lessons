I,II,III,IV
1. Посочете правилния код за създаване на заявка, която извлича всички записи от таблицата.
 - SELECT * FROM departments;

2. Посочете верния отговор за създаване на заявка, която извлича името на отдела от таблицата.
 - SELECT name FROM departments;

3. Посочете резултата от изпълнението на следната заявка:

SELECT first_name, last_name, salary FROM employees;
 - Извлича първо име и фамилия и заплата на служителите

4. Посочете резултата от изпълнение на следната заявка: 

SELECT * from projects WHERE end_date IS NULL;
 - Извежда всички колони от таблицата и само тези записи, които са NULL в колоната крайна дата.


V
1. Следната заявка ще изтрие всички записи от таблицата.

DELETE FROM `employees`

WHERE `employee_id` = 1;

 - НЕИСТИНА


VI,VII
1. Посочете какво прави клаузата INNER JOIN:
 - INNER JOIN е връзка между таблици по подразбиране. Тя връща само редовете, отговарящи на условието за свързване.

2. Посочете какво прави клаузата FULL JOIN.
 - FULL JOIN - Тази връзка връща записите, отговарящи на свързващото условие и също така несъвпадащите записи от лявата и от дясната таблица.

3. Пояснете какво прави връзката RIGHT OUTER JOIN.
 - Ключовата дума RIGHT JOIN връща всички записи от дясната таблица (таблица2) и съответстващите записи от лявата таблица (таблица1). Резултатът е 0 записа от лявата страна, ако няма съвпадение.


VIII,IX
1. В дадения код имате обединяване на заявки чрез клаузата UNION. Попълнете чрез влачене липсващите думи в кода, така че да получите работеща заявка, която да извежда данни от база от данни geography и да сортира колона name.

(select river_name as name [[2] - FROM] rivers)
  UNION

([[1] - SELECT] mountain_range from mountains)

[[3] - ORDER BY] name ASC LIMIT 100

2. Имате представена подзаявка за намиране служителите от отдел финанси и извеждане на всички колони от таблицата. Поставете липсващите думи, за да направите работещ код.

SELECT * FROM employees
[[1] - WHERE] department_id [[2] - IN]

  (

   SELECT department_id
    [[3] - FROM] departments

    [[1] - WHERE] name = 'Finance'  );


3. В така представения код има допуснати пропуски. Поправете кода и го представете, така че да извежда най-ниско платените служители от таблицата.

SELECT e.first_name, e.last_name, e.salary 

employees e

WHERE e.salary = 

  (

SELECT salary FROM employees ASC salary LIMIT 1

);

 - SELECT e.first_name, e.last_name, e.salary FROM employees e

WHERE e.salary = 

  (SELECT salary FROM employees ORDER BY salary LIMIT 1)


X,XI
1. Посочете резултата от изпълнението на следната заявка: 

UPDATE employees

SET salary = salary*1.10

WHERE department_id = 7;
 - Ще промени таблицата, като стойността на заплатата ще бъде променена само на записите, които са с номер на отдел 7.

2. Посочете резултата от изпълнението на следната заявка:

UPDATE employees

set last_name = 'Dani'

WHERE employee_id = '1';

 - Ще промени таблицата и на колоната фамилно име на служител с номер 1 ще присвои име Dani.


XII,XIII
1. В база от данни People имате таблица persons, състояща се от 4 колони и те са следните:

PersonID int NOT NULL,

FirstName varchar(25) NOT NULL,

email VARCHAR(10),

 Age int );

В таблицата имате достатъчен брой записи, които не трябва да загубите. Вашият мениджър ви поставя задача да промените броя на символите на колоната е-мейл, като ги увеличите на 100. Напишете заявка за промяна на колоната и съответно на таблицата persons.

 - ALTER TABLE persons
MODIFY COLUMN email VARCHAR(100);

2. Във вашата база от данни Soft_uni имате създадена таблица Employees с 500 записа. Необходимо е да добавите нова колона с име salary. Напишете заявка за добавяне на колоната в таблица employees. 

 - ALTER TABLE employees

ADD salary DECIMAL;



XIV
1. Създайте таблица cities, която да съдържа две колони - id и name, като прецените типа данни, който да укажете за двете колони. Колоната id да бъде първичен ключ.

 - 
CREATE TABLE cities

(

city_id INT PRIMARY KEY,

name VARCHAR(50)

);


XV,XVI,XVII,XVIII
1. Дефинирайте понятието псевдоним в базите от данни и посочете за какво се използва.
 - Псевдонимите преименуват таблица или заглавие на колона. Използват се, за да се осъществи връзка между  таблици по свързващото условие.

2. Посочете верния изход при изпълнение на следната заявка.

SELECT * FROM employees AS e

  JOIN departments AS d ON d.department_id = e.department_id

 - Таблица employees ще се преименува на е, а таблица departments ще се преименува на d и по този начин ще се осъществи връзката между двете таблици по свързващото условие колона department_id

3. Посочете резултата от изпълнението на следната заявка:

SELECT employee_id AS id, first_name, last_name

  FROM employees;

 - Колоната employee_id ще се преименува на id.

4. Следната заявка извлича от таблица projects колоната с крайна дата на проекти, която е NULL

UPDATE projects

   SET end_date = '2017-05-29'

 WHERE end_date IS NULL;

 - Неистина


XIX
1. Допишете следната заявка, така че да изведе служителите със заплати между 20000 и 30000.

SELECT `last_name`, `salary` FROM `employees`

 - SELECT `last_name`, `salary`FROM `employees`

WHERE `salary` BETWEEN 20000 AND 22000;


2. Допишете следната заявка, така че да изведе като резултат служителите със заплата по-голяма от 50000 и да ги сортира в низходящ ред.

SELECT first_name, last_name, salary FROM employees

 - SELECT first_name, last_name, salary FROM employees

WHERE salary > 50000

ORDER BY salary DESC;


XX
1.Като е използвана базата данни soft_uni, е създадена заявка за намиране на тримата служители с най-висока заплата от отдел 'Information Services'.  Моля, поставете думите в текста на заявката, за да получите работещ коректно код.

SELECT e.employee_id, e.first_name, e.salary, d.name FROM employees AS e

 [[2] - JOIN] departments AS d ON d.department_id = e.department_id

WHERE  d.name='Information Services' [[3] - ORDER BY] salary [[1] - LIMIT ] 3;

 
2. Изберете липсващите думи в следната заявка, така че да получите служителите със заплата по-голяма от 50000.

[[4] - SELECT] e.employee_id, e.first_name, e.salary, d.name [[3] - FROM ] employees AS e

JOIN departments AS d ON d.department_id = e.department_id

[[2] - WHERE] salary > 50000

[[1] - ORDER BY] d.department_id desc;


XXI
Имате дадена ER диаграма. Информацията в таблиците е въведена предварително. След като анализирате данните в базата от данни colonial_journey, създайте следните заявки. Съобразете се с посочените примери.


1. Извлечете от базата данни всички карти за пътуване. Сортирайте резултатите по номер на картата във възходящ ред.

2. Изведете от базата данни, всички колонисти. Сортирайте резултатите по собствено име, по фамилно име и най-накрая по id по възходящ ред.

3. Извлечете от базата данни най-бързия космически кораб и името на дестинацията му.


 - 
