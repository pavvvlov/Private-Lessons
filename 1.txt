I
1.Дефинирайте понятието интерпретатор.
- Интерпретаторът има за задача в [реално време] да преведе код, написан на високо ниво (най-често на динамичен език) до [машинен код] или код за виртуална машина.

Интерпретаторът е "[програма] за изпълняване на програми", написани на някакъв програмен език. Той изпълнява командите на програмата [една след друга], като разбира не само от единични команди и поредици от команди, но и от другите езикови конструкции (проверки, повторения, функции и т.н.).

Езици, които работят с интерпретатор се изпълняват без да се компилират. Поради липса на предварителна [компилация], при [интерпретеруемите ] езици грешките се откриват [по време на изпълнение], след като програмата започне да работи, а не [предварително].

2. Дефинирайте понятието компилатор.
- Компилаторът има за задача да [преведе изходния код] (най-често написан на език от по-високо ниво) до [машинен код] или друг език от по-ниско ниво, като междувременно [проверява за грешки теста] на програмата.

Резултатът от неговото изпълнение представлява [изпълним файл], специфичен за дадена хардуерна и софтуерна платформа.

При компилируемите езици за програмиране компилирането на програмата се извършва задължително [преди] нейното изпълнение и [по време] на компилация се откриват синтактичните грешки (грешно зададени команди).

3. Дефинирайте понятието програмиране.
- Поставете думите на празните места, така че да се получи правилно понятието за програмиране.
Програмиране означава да даваме [команди] на [компютъра] какво да прави.

Когато командите са няколко една след друга, те се наричат [компютърна] [програма].

Текстът на [компютърни програми] се нарича [програмен код] или сорс код.

4. Дефинирайте понятието език за програмиране.
- Езикът за програмиране е предназначен за задаване на команди, които искаме компютърът да прочете, обработи и изпълни. Чрез езиците за 
програмиране пишем поредици от команди (програми), които задават какво да прави компютъра. Изпълнението на компютърните програми може да 
се реализира с компилатор или с интерпретатор. Съществуват различни видове езици за програмиране. С езици от високо ниво като C#, Python и
JavaScript се създават приложни програми, например програма за четене на поща или чат програма.

5. Посочете кои езици са компилируеми, кои интерпретеруеми?
- Език за програмиране	компилатор/интерпретатор
Python	[с интерпретатор]
PHP	[с интерпретатор]
C++	[с компилатор]
C#	[с компилатор]
Java  [с компилатор]
JavaScript   [с интерпретатор]

6. Среда за разработка (IDE).
- Посочете коя среда за разработка на кой програмен език съответства?
	За програмиране на езика C#: Visual Studio
	За програмиране на езика Java: IntelliJ IDEA
	За програмиране на езика Python: PyCharm

7. Дефинирайте понятието алгоритъм.
- Поредица от команди, необходими, за да се свърши определена работа.

8. Компютърната програма е:
- Всичко от изброеното.

9. Дефинирайте понятието среда за разработка (IDE).
- Средата за програмиране (Integrated Development Environment - IDE, интегрирана среда за разработка) е:
	съвкупност от традиционни инструменти за разработване на софтуерни приложения.


II
1.Дефинирайте понятието интерпретатор.
- Интерпретаторът има за задача в [реално време] да преведе код, написан на високо ниво (най-често на динамичен език) до [машинен код] или код за виртуална машина.

Интерпретаторът е "[програма] за изпълняване на програми", написани на някакъв програмен език. Той изпълнява командите на програмата [една след друга], като разбира не само от единични команди и поредици от команди, но и от другите езикови конструкции (проверки, повторения, функции и т.н.).

Езици, които работят с интерпретатор се изпълняват без да се компилират. Поради липса на предварителна [компилация], при [интерпретеруемите ] езици грешките се откриват [по време на изпълнение], след като програмата започне да работи, а не [предварително].

2. Дефинирайте понятието компилатор.
- Компилаторът има за задача да [преведе изходния код] (най-често написан на език от по-високо ниво) до [машинен код] или друг език от по-ниско ниво, като междувременно [проверява за грешки теста] на програмата.

Резултатът от неговото изпълнение представлява [изпълним файл], специфичен за дадена хардуерна и софтуерна платформа.

При компилируемите езици за програмиране компилирането на програмата се извършва задължително [преди] нейното изпълнение и [по време] на компилация се откриват синтактичните грешки (грешно зададени команди).

3. Дефинирайте понятието програмиране.
- Поставете думите на празните места, така че да се получи правилно понятието за програмиране.
Програмиране означава да даваме [команди] на [компютъра] какво да прави.

Когато командите са няколко една след друга, те се наричат [компютърна] [програма].

Текстът на [компютърни програми] се нарича [програмен код] или сорс код.

4. Дефинирайте понятието език за програмиране.
- Езикът за програмиране е предназначен за задаване на команди, които искаме компютърът да прочете, обработи и изпълни. Чрез езиците за 
програмиране пишем поредици от команди (програми), които задават какво да прави компютъра. Изпълнението на компютърните програми може да 
се реализира с компилатор или с интерпретатор. Съществуват различни видове езици за програмиране. С езици от високо ниво като C#, Python и
JavaScript се създават приложни програми, например програма за четене на поща или чат програма.

5. Посочете кои езици са компилируеми, кои интерпретеруеми?
- Език за програмиране	компилатор/интерпретатор
Python	[с интерпретатор]
PHP	[с интерпретатор]
C++	[с компилатор]
C#	[с компилатор]
Java  [с компилатор]
JavaScript   [с интерпретатор]

6. Среда за разработка (IDE).
- Посочете коя среда за разработка на кой програмен език съответства?
	За програмиране на езика C#: Visual Studio
	За програмиране на езика Java: IntelliJ IDEA
	За програмиране на езика Python: PyCharm

7. Дефинирайте понятието алгоритъм.
- Поредица от команди, необходими, за да се свърши определена работа.

8. Компютърната програма е:
- Всичко от изброеното.

9. Дефинирайте понятието среда за разработка (IDE).
- Средата за програмиране (Integrated Development Environment - IDE, интегрирана среда за разработка) е:
	съвкупност от традиционни инструменти за разработване на софтуерни приложения.

III
1.Дефинирайте понятието интерпретатор.
- Интерпретаторът има за задача в [реално време] да преведе код, написан на високо ниво (най-често на динамичен език) до [машинен код] или код за виртуална машина.

Интерпретаторът е "[програма] за изпълняване на програми", написани на някакъв програмен език. Той изпълнява командите на програмата [една след друга], като разбира не само от единични команди и поредици от команди, но и от другите езикови конструкции (проверки, повторения, функции и т.н.).

Езици, които работят с интерпретатор се изпълняват без да се компилират. Поради липса на предварителна [компилация], при [интерпретеруемите ] езици грешките се откриват [по време на изпълнение], след като програмата започне да работи, а не [предварително].

2. Дефинирайте понятието компилатор.
- Компилаторът има за задача да [преведе изходния код] (най-често написан на език от по-високо ниво) до [машинен код] или друг език от по-ниско ниво, като междувременно [проверява за грешки теста] на програмата.

Резултатът от неговото изпълнение представлява [изпълним файл], специфичен за дадена хардуерна и софтуерна платформа.

При компилируемите езици за програмиране компилирането на програмата се извършва задължително [преди] нейното изпълнение и [по време] на компилация се откриват синтактичните грешки (грешно зададени команди).

3. Дефинирайте понятието програмиране.
- Поставете думите на празните места, така че да се получи правилно понятието за програмиране.
Програмиране означава да даваме [команди] на [компютъра] какво да прави.

Когато командите са няколко една след друга, те се наричат [компютърна] [програма].

Текстът на [компютърни програми] се нарича [програмен код] или сорс код.

4. Дефинирайте понятието език за програмиране.
- Езикът за програмиране е предназначен за задаване на команди, които искаме компютърът да прочете, обработи и изпълни. Чрез езиците за 
програмиране пишем поредици от команди (програми), които задават какво да прави компютъра. Изпълнението на компютърните програми може да 
се реализира с компилатор или с интерпретатор. Съществуват различни видове езици за програмиране. С езици от високо ниво като C#, Python и
JavaScript се създават приложни програми, например програма за четене на поща или чат програма.

5. Посочете кои езици са компилируеми, кои интерпретеруеми?
- Език за програмиране	компилатор/интерпретатор
Python	[с интерпретатор]
PHP	[с интерпретатор]
C++	[с компилатор]
C#	[с компилатор]
Java  [с компилатор]
JavaScript   [с интерпретатор]

6. Среда за разработка (IDE).
- Посочете коя среда за разработка на кой програмен език съответства?
	За програмиране на езика C#: Visual Studio
	За програмиране на езика Java: IntelliJ IDEA
	За програмиране на езика Python: PyCharm

7. Дефинирайте понятието алгоритъм.
- Поредица от команди, необходими, за да се свърши определена работа.

8. Компютърната програма е:
- Всичко от изброеното.

9. Дефинирайте понятието среда за разработка (IDE).
- Средата за програмиране (Integrated Development Environment - IDE, интегрирана среда за разработка) е:
	съвкупност от традиционни инструменти за разработване на софтуерни приложения.


IV
1. Демонстрирайте как бихте създали конзолно приложение в средата за разработка Visual Studio. Подредете картинките така,
 че да спазват правилната последователност от стъпките за създаване на ново конзолно приложение. 

Номерирайте картинките, като използвате цифрите за влачене под таблицата.


2. Демонстрирайте начините за стартиране на проект в VS
- С клавишната комбинация Ctrl + F5
- С бутона за стартиране

V
1. Описва оператор за многовариантен избор (switch).
- Дефинирайте оператор за многовариантен избор (switch-case).
	Когато работата на програмата ни зависи от стойността на една променлива, вместо да правим последователни проверки с множество if-else блокове, можем да използваме условната конструкция switch-case.

Конструкцията се състои от:

Селектор - израз, който се изчислява до някаква конкретна стойност. Типът на селектора може да бъде цяло число, string или enum.
Множество case етикети с команди след тях, завършващи с break.

2. Типове данни: Стойности по подразбиране
- Посочете правилната стойност по подразбиране към всеки от типовете данни:
	sbyte: 0
	char: '\u0000'
	float: 0.0f
	decimal: 0.0m
	string: null
	object: null
	bool: false
3. Променливи: Инициализация на променливи
- Посочете какво означава терминът инициализация?
	Задаване на начална стойност.

4. Променливи: Как бихте декларирали променлива в C#?
- Посочете коя от променливите е правилно декларирана?
	bool isSunny = true;

5. Променливи: Кое твърдение е вярно за променливите?
- Посочете кое твърдение е вярно за променливите?
	Променливата е място, на което пазим информация.	
	Всяка една променлива в C# си има тип и име.
	Не може да има две променливи с едно и също име.
	
6. Променливи: Стойностни и референтни типове
- Посочете кое от изброените НЕ е вярно за стойностните типове данни?
	Стойностните типове данни съдържат в стека за изпъл­нение на програмата референция 
	(адрес) към динамичната памет (heap).

VI
1. Дава пример за оператор за многовариантен избор (switch).
- Дайте пример (напишете примерен код) за оператор за многовариантен избор (switch-case)  като използвате програмния език C#.
	switch (селектор)
{
    case стойност1:
        конструкция;
        break;
    case стойност2:
        конструкция;
        break;
    default:
        конструкция;
        break;
}

2. Решете задачата: Показан е следният програмен фрагмент на C#. Какви стойности трябва да се зададат на променливите age и gender, за да получим резултат "Ms."? 
            double age = double.Parse(Console.ReadLine());
            char gender = char.Parse(Console.ReadLine());
            if (age < 16)
            {
                if (gender == 'm')
                {
                    Console.WriteLine("Master");
                }
                else if (gender == 'f')
                {
                    Console.WriteLine("Miss");
                }
                else
                {
                    if (gender == 'm')
                    {
                        Console.WriteLine("Mr.");
                    }
                    else
                    {
                        Console.WriteLine("Ms.");
                    }
                }
            }

- age = 16
  gender = f
  age = 15
  gender = m

3. Показан е следният програмен фрагмент на C#. Обобщете какъв ще бъде резултатът от изпълнението на програмата?
   int n = int.Parse(Console.ReadLine());
            for (int i = 0; i > 0; i--)
            {
                Console.WriteLine(i);
            }
- Програмата прочита едно целочислено число. След което цикълът отпечатва числата от 1 до това число n в обратен ред, като всяко едно от числата се отпечатва на отделен ред.


VII
1. Дайте пример за конзолна програма, която чете от конзолата страна и височина на триъгълник, въведени от потребителя, и пресмята неговото лице. Използвайте формулата за лице на триъгълник: area = a * h / 2. Закръглете резултата до 2 знака след десетичната точка.
   вход   изход
    20     Triangle area = 300
    30
    15     Triangle area = 262.5
    35

- 	    double a = double.Parse(Console.ReadLine());
            double h = double.Parse(Console.ReadLine());

            double area = a * h / 2;

            Console.WriteLine($"Triangle area = {Math.Round(area, 2)}");

2. Посоченият по-долу фрагмент на C# събира числото 0.00001 общо 100000 пъти. Очакваният резултат от това е 1. При изпълнение се получава резултат 0.999999999998084. Как ще промените програмата, така че да се поправи тази изчислителна грешка?
            double result = 0;
            for (int i = 0; i < 100000; i++)
            {
                result += 0.00001;
            }
            Console.WriteLine(result);

- Чрез използване на тип decimal вместо double и добавянето на суфикс M след изписването на 0 и 0.00001.


VIII
1. В таблицата по-долу трябва да посочите правилните места на операторите за сравнение в C#. В колона Означение поставяте съответния оператор, а в колона Работи за - задавате данните, за които може да работи съответния оператор.
   Оператор                 Означение       Работи за
   проверка за равенство	==	      числа, стрингове, дати
   проверка за различие		!=	      
   по-голямо			>	       числа, дати, други сравними типове
   по-голямо или равно		>=
   по-малко			<
   по-малко или равно		<=

2. Формулирайте правилно определението за условни конструкции.
- Условните конструкции if и if-else представляват [тип условен контрол], чрез който програмата може да се държи [различно], в зависимост от [някакво условие], което се проверява по време на изпълнение на конструкцията.

3. Посочете какво означава живот на променливата или т.нар. variable scope в езика C#?
- Живот на променливата означава, че тя има обхват, който уточнява къде може да бъде използвана тази променлива.

4. Посочете как се записва в C# кратка форма на условна конструкция?
- if(true) { //some code... }

5. Посочете как задаваме в C# пълната форма на условни конструкции?
-  if(true) { //some code... } else { //some code... }


IX
1. В таблицата по-долу трябва да посочите правилните места на операторите за сравнение в C#. В колона Означение поставяте съответния оператор, а в колона Работи за - задавате данните, за които може да работи съответния оператор.
   Оператор                 Означение       Работи за
   проверка за равенство	==	      числа, стрингове, дати
   проверка за различие		!=	      
   по-голямо			>	       числа, дати, други сравними типове
   по-голямо или равно		>=
   по-малко			<
   по-малко или равно		<=

2. Формулирайте правилно определението за условни конструкции.
- Условните конструкции if и if-else представляват [тип условен контрол], чрез който програмата може да се държи [различно], в зависимост от [някакво условие], което се проверява по време на изпълнение на конструкцията.

3. Посочете какво означава живот на променливата или т.нар. variable scope в езика C#?
- Живот на променливата означава, че тя има обхват, който уточнява къде може да бъде използвана тази променлива.

4. Посочете как се записва в C# кратка форма на условна конструкция?
- if(true) { //some code... }

5. Посочете как задаваме в C# пълната форма на условни конструкции?
-  if(true) { //some code... } else { //some code... }


XX
1. Дайте пример за конзолна програма, която чете оценка (десетично число), въведена от потребителя, и отпечатва “Excellent!”, ако оценката е 5.50 или по-висока, или “Not excellent.” в противен случай.
-           double grade = double.Parse(Console.ReadLine());

            if(grade >= 5.50)//true
                Console.WriteLine("Excellent!");
            else//false
                Console.WriteLine("Not Excellent!");

2. Дайте пример за конзолна програма, която чете цяло число, въведено от потребителя, и печата дали е четно ("even") или нечетно ("odd").
- 	    int number = int.Parse(Console.ReadLine());

            if (number % 2 == 0)
            {
                Console.WriteLine("even");
            }
            else
            {
                Console.WriteLine("odd");
            }

3. Дайте пример за конзолна програма, която чете две цели числа, въведени от потребителя, и отпечатва по-голямото от двете. 

Не използвайте вградените функционалности в .NET! Решете задачата с условна конструкция!
- 	    double a = double.Parse(Console.ReadLine());
            double b = double.Parse(Console.ReadLine());

            if (a > b)
            {
                Console.WriteLine($"a = {a}");
            }
            else
            {
                Console.WriteLine($"b = {b}");
            }

4. Дайте пример за конзолна програма, която чете парола (един ред с произволен текст), въведена от потребителя, и проверява дали въведеното съвпада с фразата “s3cr3t!P@ssw0rd”. При съвпадение да се изведе “Welcome”. При несъвпадение да се изведе “Wrong password!”.
-           string secretPass = "s3cr3t!P@ssw0rd";
            string password = Console.ReadLine();
            if (password.Equals(secretPass))
            {
                Console.WriteLine("Welcome!");
            }
            else
            {
                Console.WriteLine("Wrong password!");
            }

5. Дайте пример за конзолна програма, която чете оценка (десетично число), въведена от потребителя, и отпечатва “Excellent!”, ако оценката е 5.50 или по-висока.
-           double grade = double.Parse(Console.ReadLine());

            if (grade >= 5.50)//true
            {
                Console.WriteLine("Excellent!");
            }

6.  Обяснете в каква последователност ще се изпълни програмата, когато имаме серия от проверки като на примера по-долу?
            int number = int.Parse(Console.ReadLine());
            if (number == 1)
            {
                Console.WriteLine("one");
            }
            else if (number == 2)
            {
                Console.WriteLine("two");
            }
            else if (number == 3)...
            else if (number == 4)...
            else if (number == 5)...
            else if (number == 6)...
            else if (number == 7)...
            else if (number == 8)...
            else if (number == 9)
            {
                Console.WriteLine("nine");
            }
            else
            {
                Console.WriteLine("number is too big");
            }
- Последователно сравнява входното число от конзолата с цифрите от 1 до 9, като всяко следващо сравнение се извършва, само в случай че предходното сравнение не е било истина. Ако никое от if условията не е изпълнено, се изпълнява последната else клаузa.


XI
1. Дайте пример за конзолна програма, която чете оценка (десетично число), въведена от потребителя, и отпечатва “Excellent!”, ако оценката е 5.50 или по-висока, или “Not excellent.” в противен случай.
-           double grade = double.Parse(Console.ReadLine());

            if(grade >= 5.50)//true
                Console.WriteLine("Excellent!");
            else//false
                Console.WriteLine("Not Excellent!");

2. Дайте пример за конзолна програма, която чете цяло число, въведено от потребителя, и печата дали е четно ("even") или нечетно ("odd").
- 	    int number = int.Parse(Console.ReadLine());

            if (number % 2 == 0)
            {
                Console.WriteLine("even");
            }
            else
            {
                Console.WriteLine("odd");
            }

3. Дайте пример за конзолна програма, която чете две цели числа, въведени от потребителя, и отпечатва по-голямото от двете. 

Не използвайте вградените функционалности в .NET! Решете задачата с условна конструкция!
- 	    double a = double.Parse(Console.ReadLine());
            double b = double.Parse(Console.ReadLine());

            if (a > b)
            {
                Console.WriteLine($"a = {a}");
            }
            else
            {
                Console.WriteLine($"b = {b}");
            }

4. Дайте пример за конзолна програма, която чете парола (един ред с произволен текст), въведена от потребителя, и проверява дали въведеното съвпада с фразата “s3cr3t!P@ssw0rd”. При съвпадение да се изведе “Welcome”. При несъвпадение да се изведе “Wrong password!”.
-           string secretPass = "s3cr3t!P@ssw0rd";
            string password = Console.ReadLine();
            if (password.Equals(secretPass))
            {
                Console.WriteLine("Welcome!");
            }
            else
            {
                Console.WriteLine("Wrong password!");
            }

5. Дайте пример за конзолна програма, която чете оценка (десетично число), въведена от потребителя, и отпечатва “Excellent!”, ако оценката е 5.50 или по-висока.
-           double grade = double.Parse(Console.ReadLine());

            if (grade >= 5.50)//true
            {
                Console.WriteLine("Excellent!");
            }

6.  Обяснете в каква последователност ще се изпълни програмата, когато имаме серия от проверки като на примера по-долу?
            int number = int.Parse(Console.ReadLine());
            if (number == 1)
            {
                Console.WriteLine("one");
            }
            else if (number == 2)
            {
                Console.WriteLine("two");
            }
            else if (number == 3)...
            else if (number == 4)...
            else if (number == 5)...
            else if (number == 6)...
            else if (number == 7)...
            else if (number == 8)...
            else if (number == 9)
            {
                Console.WriteLine("nine");
            }
            else
            {
                Console.WriteLine("number is too big");
            }
- Последователно сравнява входното число от конзолата с цифрите от 1 до 9, като всяко следващо сравнение се извършва, само в случай че предходното сравнение не е било истина. Ако никое от if условията не е изпълнено, се изпълнява последната else клаузa.

XII
1. Имате даден следният програмен фрагмент:
	class Program
    {
        static void Main(string[] args)
        {
            double number = double.Parse(Console.ReadLine());
            if (number < 100)
            {
                Console.WriteLine($"{number} is Less than 100");
            }
            else if (number <= 200)
            {
                Console.WriteLine($"{number} is Between 100 and 200");
            }
            else
            {
                Console.WriteLine($"{number} Greater than 200");
            }
        }
    }
Открийте какъв ще бъде резултатът след изпълнението на програмата при подаден вход 120.
- Between 100 and 200

2. Даден е следният програмен код на C#. Открийте какъв ще бъде резултатът от изпълнението на програмата. В полето запишете очакваният резултат и защо се е получил този резултат?
	    string color = "red";
            if (color == "red")        
                Console.WriteLine("tomato");
            else if(color == "yellow")
                Console.WriteLine("banana");
                Console.WriteLine("lemon");

- tomato lemon. Когато имаме само една команда в тялото на if конструкцията, можем да пропуснем къдравите скоби, обозначаващи тялото на условния оператор. Когато искаме да изпълним блок от код (група команди), къдравите скоби са задължителни. В случай че ги изпуснем, ще се изпълни само първият ред след if клаузата.


XIII
1. Дефинирайте понятието метод - Защо е добра практика да използваме методи? Как се декларират методи? Как се извикват методи? Какво са параметри на метод и връщана стойност?
- Дефиниция:

Методите са парчета код, които са именувани от нас по определен начин и които могат да бъдат извикани толкова пъти, колкото имаме нужда.

Един метод може да бъде извикан толкова пъти, колкото ние преценим, че ни е нужно за решаване на даден проблем. Това ни спестява повторението на един и същи код няколко пъти, както и намалява възможността да пропуснем грешка при евентуална корекция на въпросния код.

Даден проблем може да бъде разделен на по-малки части, като това ни улеснява  да го решим, избягваме повторенията на код и ни предпазва от грешки, също така подобрява четимостта на кода.

Деклариране на методи:

В езика C# декларираме методите в рамките на даден клас, т.е. между отварящата { и затваряща } скоби на класа. Декларирането представлява регистрирането на метода в програмата, за да бъде разпознаван в останалата част от нея. 

Със следващия пример ще разгледаме задължителните елементи в декларацията на един метод.



Тип на връщаната стойност. В случая типа е double, което означава, че методът от примера ще върне резултат, който е от тип double. Връщаната стойност може да бъде както int, double, string и т.н., така и void. Ако типът е void, то това означава, че методът не връща резултат, а само изпълнява дадена операция.
Име на метода. Името на метода е определено от нас, като не забравяме, че трябва да описва функцията, която е изпълнявана от кода в тялото му. В примера името е GetSquare, което ни указва, че задачата на този метод е да изчисли лицето на квадрат.
Списък с параметри. Декларира се между скобите ( и ), които изписваме след името му. Тук изброяваме поредицата от параметри, които метода ще използва. Може да присъства само един параметър, няколко такива или да е празен списък. Ако няма параметри, то ще запишем само скобите (). В конкретния пример декларираме параметъра double num.
Декларация static в описанието на метода. За момента може да приемем, че static се пише винаги, когато се декларира метод, а по-късно, когато се запознаем с обектно-ориентираното програмиране (ООП), ще разберем разликата между статични методи (споделени за целия клас) и методи на обект, които работят върху данните на конкретна инстанция на класа (обект).
При деклариране на методи е важно да спазваме последователността на основните му елементи - първо тип на връщаната стойност, след това име на метода и накрая списък от параметри, ограден с кръгли скоби ().

След като сме декларирали метода, следва неговата имплементация (тяло). В тялото на метода описваме алгоритъма, по който той решава даден проблем, т.е. тялото съдържа кода (програмен блок), който реализира логиката на метода. В показания пример изчисляваме лицето на квадрат, а именно num * num.

Когато декларираме дадена променлива в тялото на един метод, я наричаме локална променлива за метода. Областта, в която съществува и може да бъде използвана тази променлива, започва от реда, на който сме я декларирали и стига до затварящата къдрава скоба } на тялото на метода. Тази област се нарича област на видимост на променливата (variable scope).

Извикване на методи:

Извикването на метод представлява стартирането на изпълнението на кода, който се намира в тялото на метода. Това става като изпишем името му, последвано от кръглите скоби () и знака ; за край на реда. Ако методът ни изисква входни данни, то те се подават в скобите (), като последователността на фактическите параметри трябва да съвпада с последователността на подадените при декларирането на метода. 

2. Дефинирайте понятието вложени цикли.
- Вложените цикли представляват конструкция, при която в тялото на един цикъл (външен) се изпълнява друг цикъл (вътрешен). За всяко завъртане на външния цикъл, вътрешният се извърта целият. Това се случва по следния начин:

При стартиране на изпълнение на вложени цикли първо стартира външният цикъл: извършва се инициализация на неговата управляваща променлива и след проверка за край на цикъла, се изпълнява кодът в тялото му.
След това се изпълнява вътрешният цикъл. Извършва се инициализация на началната стойност на управляващата му променлива, прави се проверка за край на цикъла и се изпълнява кодът в тялото му.
При достигане на зададената стойност за край на вътрешния цикъл, програмата се връща една стъпка нагоре и се продължава започналото изпълнение предходния (външния) цикъл. Променя се с една стъпка управляващата променлива за външния цикъл, проверява се дали условието за край е удовлетворено и започва ново изпълнение на вложения (вътрешния) цикъл.
Това се повтаря докато променливата на външния цикъл достигне условието за край на цикъла.

3. Дефинирайте понятието "цикли" в програмирането. Избройте видовете цикли в C#.
- Конструкции за повторение на група команди, известни в програмирането с понятието "цикли".

В програмирането често пъти се налага да изпълним блок с команди няколко пъти. За целта се използват т.нар. цикли.

Примери: for, while, do-while, foreach.

4. Дефинирайте понятието for цикъл в C#. Опишете декларацията на for цикъл който преминава последователно през числата от 1 до 10 и ги отпечатва. Опишете конструкцията на for цикълa, декларация, стъпки, цел и тяло на цикъла. 
- for (int i = 1; i <= 10; i++)
{
      Console.WriteLine(i);
}


Цикълът започва с оператора for и преминава през всички стойности за дадена променлива в даден интервал, например всички числа от 1 до 10 включително, и за всяка стойност изпълнява поредица от команди.

В декларацията на цикъла може да се зададе начална стойност (i = 1) и крайна стойност (i <= 10). Тялото на цикъла обикновено се огражда с къдрави скоби { } и представлява блок с една или няколко команди. 

Целта на цикъла е да се премине последователно през числата 1, 2, 3, …, n и за всяко от тях да се изпълни някакво действие. 

В примера по-горе променливата i приема стойности от 1 до 10 и в тялото на цикъла се отпечатва текущата стойност. Цикълът се повтаря 10 пъти и всяко от тези повторения се нарича "итерация".

5. Показан е следния програмен код на C#. Каква е целта на програмата? Посочете верния отговор.
	for (int i = 1; i <= 1000; i++)
            {
                if (i % 10 == 7)
                {
                    Console.WriteLine(i);
                }
            }
- Намира всички числа в интервала [1 … 1000], които завършват на 7 и ги отпечатва на конзолата.

6. Показан е следния програмен код на C#. Каква е целта на програмата? Посочете верния отговор.
	for (int i = 1; i < 1000; i++)
            {
                if (i % 7 == 0)
                {
                    Console.WriteLine(i);
                }
            }
- Намира всички числа в интервала [1 … 1000], които се делят на 7 и ги отпечатва на конзолата.


XIV1. Дефинирайте понятието метод - Защо е добра практика да използваме методи? Как се декларират методи? Как се извикват методи? Какво са параметри на метод и връщана стойност?
- Дефиниция:

Методите са парчета код, които са именувани от нас по определен начин и които могат да бъдат извикани толкова пъти, колкото имаме нужда.

Един метод може да бъде извикан толкова пъти, колкото ние преценим, че ни е нужно за решаване на даден проблем. Това ни спестява повторението на един и същи код няколко пъти, както и намалява възможността да пропуснем грешка при евентуална корекция на въпросния код.

Даден проблем може да бъде разделен на по-малки части, като това ни улеснява  да го решим, избягваме повторенията на код и ни предпазва от грешки, също така подобрява четимостта на кода.

Деклариране на методи:

В езика C# декларираме методите в рамките на даден клас, т.е. между отварящата { и затваряща } скоби на класа. Декларирането представлява регистрирането на метода в програмата, за да бъде разпознаван в останалата част от нея. 

Със следващия пример ще разгледаме задължителните елементи в декларацията на един метод.



Тип на връщаната стойност. В случая типа е double, което означава, че методът от примера ще върне резултат, който е от тип double. Връщаната стойност може да бъде както int, double, string и т.н., така и void. Ако типът е void, то това означава, че методът не връща резултат, а само изпълнява дадена операция.
Име на метода. Името на метода е определено от нас, като не забравяме, че трябва да описва функцията, която е изпълнявана от кода в тялото му. В примера името е GetSquare, което ни указва, че задачата на този метод е да изчисли лицето на квадрат.
Списък с параметри. Декларира се между скобите ( и ), които изписваме след името му. Тук изброяваме поредицата от параметри, които метода ще използва. Може да присъства само един параметър, няколко такива или да е празен списък. Ако няма параметри, то ще запишем само скобите (). В конкретния пример декларираме параметъра double num.
Декларация static в описанието на метода. За момента може да приемем, че static се пише винаги, когато се декларира метод, а по-късно, когато се запознаем с обектно-ориентираното програмиране (ООП), ще разберем разликата между статични методи (споделени за целия клас) и методи на обект, които работят върху данните на конкретна инстанция на класа (обект).
При деклариране на методи е важно да спазваме последователността на основните му елементи - първо тип на връщаната стойност, след това име на метода и накрая списък от параметри, ограден с кръгли скоби ().

След като сме декларирали метода, следва неговата имплементация (тяло). В тялото на метода описваме алгоритъма, по който той решава даден проблем, т.е. тялото съдържа кода (програмен блок), който реализира логиката на метода. В показания пример изчисляваме лицето на квадрат, а именно num * num.

Когато декларираме дадена променлива в тялото на един метод, я наричаме локална променлива за метода. Областта, в която съществува и може да бъде използвана тази променлива, започва от реда, на който сме я декларирали и стига до затварящата къдрава скоба } на тялото на метода. Тази област се нарича област на видимост на променливата (variable scope).

Извикване на методи:

Извикването на метод представлява стартирането на изпълнението на кода, който се намира в тялото на метода. Това става като изпишем името му, последвано от кръглите скоби () и знака ; за край на реда. Ако методът ни изисква входни данни, то те се подават в скобите (), като последователността на фактическите параметри трябва да съвпада с последователността на подадените при декларирането на метода. 

2. Дефинирайте понятието вложени цикли.
- Вложените цикли представляват конструкция, при която в тялото на един цикъл (външен) се изпълнява друг цикъл (вътрешен). За всяко завъртане на външния цикъл, вътрешният се извърта целият. Това се случва по следния начин:

При стартиране на изпълнение на вложени цикли първо стартира външният цикъл: извършва се инициализация на неговата управляваща променлива и след проверка за край на цикъла, се изпълнява кодът в тялото му.
След това се изпълнява вътрешният цикъл. Извършва се инициализация на началната стойност на управляващата му променлива, прави се проверка за край на цикъла и се изпълнява кодът в тялото му.
При достигане на зададената стойност за край на вътрешния цикъл, програмата се връща една стъпка нагоре и се продължава започналото изпълнение предходния (външния) цикъл. Променя се с една стъпка управляващата променлива за външния цикъл, проверява се дали условието за край е удовлетворено и започва ново изпълнение на вложения (вътрешния) цикъл.
Това се повтаря докато променливата на външния цикъл достигне условието за край на цикъла.

3. Дефинирайте понятието "цикли" в програмирането. Избройте видовете цикли в C#.
- Конструкции за повторение на група команди, известни в програмирането с понятието "цикли".

В програмирането често пъти се налага да изпълним блок с команди няколко пъти. За целта се използват т.нар. цикли.

Примери: for, while, do-while, foreach.

4. Дефинирайте понятието for цикъл в C#. Опишете декларацията на for цикъл който преминава последователно през числата от 1 до 10 и ги отпечатва. Опишете конструкцията на for цикълa, декларация, стъпки, цел и тяло на цикъла. 
- for (int i = 1; i <= 10; i++)
{
      Console.WriteLine(i);
}


Цикълът започва с оператора for и преминава през всички стойности за дадена променлива в даден интервал, например всички числа от 1 до 10 включително, и за всяка стойност изпълнява поредица от команди.

В декларацията на цикъла може да се зададе начална стойност (i = 1) и крайна стойност (i <= 10). Тялото на цикъла обикновено се огражда с къдрави скоби { } и представлява блок с една или няколко команди. 

Целта на цикъла е да се премине последователно през числата 1, 2, 3, …, n и за всяко от тях да се изпълни някакво действие. 

В примера по-горе променливата i приема стойности от 1 до 10 и в тялото на цикъла се отпечатва текущата стойност. Цикълът се повтаря 10 пъти и всяко от тези повторения се нарича "итерация".

5. Показан е следния програмен код на C#. Каква е целта на програмата? Посочете верния отговор.
	for (int i = 1; i <= 1000; i++)
            {
                if (i % 10 == 7)
                {
                    Console.WriteLine(i);
                }
            }
- Намира всички числа в интервала [1 … 1000], които завършват на 7 и ги отпечатва на конзолата.

6. Показан е следния програмен код на C#. Каква е целта на програмата? Посочете верния отговор.
	for (int i = 1; i < 1000; i++)
            {
                if (i % 7 == 0)
                {
                    Console.WriteLine(i);
                }
            }
- Намира всички числа в интервала [1 … 1000], които се делят на 7 и ги отпечатва на конзолата.


XV
1. Дайте пример за метод (напишете примерен код), който сумира числата от 1 до n включително и като резултат връща тази сума. За примера използвайте код написан на програмния език C#.
- public static int SumNumbers(int n)
 {
       int sum = 0;
       for (int i = 1; i <= n; i++)
       {
            sum += i;
        }
       return sum;
}

2. Дайте пример за for - цикъл в C#. За пример може да ползвате код, който отпечатва на конзолата числата от 1 до 100.
- for (int i = 1; i <= 100; i++)
{
      Console.WriteLine(i);
}

3. Дайте пример за while цикъл в C#, който отпечатва числата от 1 до 10(включително), всяко на отделен ред.
- int num = 1;
while (num <= 10)
{
       Console.WriteLine(num++);
}


XVI
1. Дайте пример за метод (напишете примерен код), който сумира числата от 1 до n включително и като резултат връща тази сума. За примера използвайте код написан на програмния език C#.
- public static int SumNumbers(int n)
 {
       int sum = 0;
       for (int i = 1; i <= n; i++)
       {
            sum += i;
        }
       return sum;
}

2. Дайте пример за for - цикъл в C#. За пример може да ползвате код, който отпечатва на конзолата числата от 1 до 100.
- for (int i = 1; i <= 100; i++)
{
      Console.WriteLine(i);
}

3. Дайте пример за while цикъл в C#, който отпечатва числата от 1 до 10(включително), всяко на отделен ред.
- int num = 1;
while (num <= 10)
{
       Console.WriteLine(num++);
}


XVII
1. Напишете метод на C#, който отпечатва на конзолата квадрат от звездички с размери nхn. Квадратът трябва да изглежда по следният начин:
	********
	********
	********
	********
- public void PrintSquare(int n)
        {
            for (int i = 1; i <= n; i++)
            {
                for (int j = 1; j <= n; j++)
                {
                    Console.Write("* ");
                }
                Console.WriteLine();
            }
        }

2. Даден е следният примерен код на C#. Изчислете какъв ще бъде резултата, ако числото n = 5 , запишете в полето за отговор това, което ще се отпечата на конзолата.
	    int n = int.Parse(Console.ReadLine());
            int sum = 0;
            for (int i = 0; i < n; i+=2)
            {
                sum += i;
            }
            Console.WriteLine(sum);
- 6


XVIII, XIX, XX, XXI
1. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие: Разполагате със следния програмен код:  Болница
	static void Main(string[] args)
        {
            int days = (Console.ReadLine());
            int doctors = 7;
            int treated = 0; 
            int untreated = 0; 
            for (int day = 1; day < days; day++) 
            {
                int patientsCount = int.Parse(Console.ReadLine());
                if (day / 3 == 0 && untreated > treated) 
                {
                    doctors++; 
                }
                if (patientsCount = doctors)
                {
                    treated += patientsCount; 
                }
                else
                
                    treated += doctors;
                    untreated += (patientsCount + doctors);
                } 
            } 
            Console.WriteLine("Treated patients: {treated}."); 
            Console.WriteLine("Untreated patients: {untreated}."); 
        }
Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.
- static void Main(string[] args)
        {
            int days = int.Parse(Console.ReadLine());//1Т
            int doctors = 7;
            int treated = 0; 
            int untreated = 0; 
            for (int day = 1; day <= days; day++) //1Т
            {
                int patientsCount = int.Parse(Console.ReadLine());

                if (day % 3 == 0 && untreated > treated) //2Т
                {
                    doctors++; 
                }
                if (patientsCount <= doctors)//1Т
                {
                    treated += patientsCount; 
                }
                else
                {//1Т
                    treated += doctors;
                    untreated += (patientsCount - doctors);//2Т
                } 
            } 
            Console.WriteLine($"Treated patients: {treated}."); //1Т
            Console.WriteLine($"Untreated patients: {untreated}."); //1Т
        }

2. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие: Разполагате със следния програмен код:    Деление без остатък
	 int n = int.Parse(Console.ReadLine());              
            int d3 = 0; 
            int d5 = 0; 

            for (int i = 0; i < n; i--) 
            {
                int number = Console.ReadLine();
                if (number % 2 == 0) 
                {
                    d2++; 
                
                if (number % 3 == 0) 
                {
                    d3++ 
                }
                if (number / 5 == 0) 
                {
                    d5++; 
                }
            }

            Console.WriteLine(d2); 
            Console.WriteLine(d3); 
            Console.WriteLine(d5); 
Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.
-  int n = int.Parse(Console.ReadLine()); 
            int d2 = 0; //2Т
            int d3 = 0; 
            int d5 = 0; 

            for (int i = 0; i < n; i++) //2Т
            {
                int number = int.Parse(Console.ReadLine());//2Т
                if (number % 2 == 0) 
                {
                    d2++; 
                }//1Т
                if (number % 3 == 0) 
                {
                    d3++; //1Т
                }
                if (number % 5 == 0) //2Т
                {
                    d5++; 
                }
            }

            Console.WriteLine(d2); 
            Console.WriteLine(d3); 
            Console.WriteLine(d5);

3. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие: Разполагате със следния програмен код:    Елените на Дядо Коледа
	var days = Console.ReadLine();
            int kgFood = int.Parse(Console.ReadLine());
            double dailyFoodFirst = double.Parse(Console.ReadLine());
            double dailyFoodSecond = double.Parse();
            double dailyFoodThird = double.Parse(Console.ReadLine());

            int foodNeeded = days * dailyFoodFirst
                                + days * dailyFoodSecond
                                + days * dailyFoodThird;

            if (kgFood <= foodNeeded)
            {
                Console.WriteLine("{Math.Floor(kgFood - foodNeeded)} kilos of food left.");
            }
            else
            {
                Console.WriteLine("{Math.Ceiling(foodNeeded - kgFood)} more kilos of food are needed.");
            }
        }
Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.
- int days = int.Parse(Console.ReadLine());//2т
            int kgFood = int.Parse(Console.ReadLine()); 
            double dailyFoodFirst = double.Parse(Console.ReadLine()); 
            double dailyFoodSecond = double.Parse(Console.ReadLine()); //2т
            double dailyFoodThird = double.Parse(Console.ReadLine()); 

            //2т
            double foodNeeded = days * dailyFoodFirst
                                + days * dailyFoodSecond
                                + days * dailyFoodThird; 

            if (kgFood >= foodNeeded) //2т
            {
                Console.WriteLine($"{Math.Floor(kgFood - foodNeeded)} kilos of food left.");//1т
            }
            else 
            {
                Console.WriteLine($"{Math.Ceiling(foodNeeded - kgFood)} more kilos of food are needed.");//1т
            }

4. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие: Разполагате със следния програмен код:    Футбол
	string sector = Console.ReadLine()
            int row = int.Parse(Console.ReadLine());
            int col = int.Parse(Console.ReadLine()); 

            switch ()
            { 
                case "Sector A":
                    totalSum = GetTotalProfit(row, col, 11.60); 
                    
                case "Sector B":
                    totalSum = GetTotalProfit(row, col, 14.50)
                    break;
                case "Sector C": 
                    totalSum = GetTotalProfit(row, col, 16.10); 
                    break;
                case "Sector D"
                    totalSum = GetTotalProfit(row, col, 8.40);
                    break;
            
            Console.WriteLine($"{sector} profit is {totalSum:f2} lv.");
        }
        static double GetTotalProfit(int row, int col, double price)
        {
            return row * col * price;
        }
Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.
- static void Main(string[] args)
        {
            string sector = Console.ReadLine(); //1Т
            int row = int.Parse(Console.ReadLine());
            int col = int.Parse(Console.ReadLine()); 
            double totalSum = 0;//2Т

            switch (sector)//2Т
            { 
                case "Sector A":
                    totalSum = GetTotalProfit(row, col, 11.60); 
                    break; //2Т
                case "Sector B":
                    totalSum = GetTotalProfit(row, col, 14.50);//1Т
                    break;
                case "Sector C": 
                    totalSum = GetTotalProfit(row, col, 16.10); 
                    break;
                case "Sector D"://1Т
                    totalSum = GetTotalProfit(row, col, 8.40);
                    break;
            }//1Т
            Console.WriteLine($"{sector} profit is {totalSum:f2} lv.");
        }
        static double GetTotalProfit(int row, int col, double price)
        {
            return row * col * price;
        }

5. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие: Разполагате със следния програмен код:    Хотелска стая
	static void Main(string[] args)
        {
            string month = ""; 
            int nightsCount = int.Parse(Console.ReadLine());
            double studio = 0; 
            double apartment = 0; 
            switch (month) 
            {
                case "May":
                case "October":
                    studio = 50;
                    apartment = 65;
                    if (nightsCount > 14) 
                    {
                        studio = studio * 0.30;
                    }
                    if (nightsCount > 7) 
                    {
                        studio -= studio * 0.05;
                    }
                    break;
                case "June":
                case "September":
                    studio = 75.20;
                    apartment = 68.70;
                    if (nightsCount > 14)
                    
                        studio -= studio * 0.20; 
                    }
                    break;
                case "July"
                case "August":
                    studio = 76;
                    apartment = 77;
                    break;
            }

            if (nightsCount > 14) 
            {
                apartment -= apartment * 10; 
            }

            double totalApartment = apartment * nightsCount; 
            double totalStudio = studio * nightsCount; 
            Console.WriteLine("Apartment: {totalApartment:f2} lv.");
            Console.WriteLine($"Studio: {totalStudio:f2} lv."); 
        }
Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.
-  static void Main(string[] args)
        {
            string month = Console.ReadLine(); //2Т
            int nightsCount = int.Parse(Console.ReadLine());
            double studio = 0; 
            double apartment = 0; 
            switch (month) 
            {
                case "May":
                case "October":
                    studio = 50;
                    apartment = 65;
                    if (nightsCount > 14) 
                    {
                        studio -= studio * 0.30;//1Т
                    }
                    else if (nightsCount > 7) //2Т
                    {
                        studio -= studio * 0.05;
                    }
                    break;
                case "June":
                case "September":
                    studio = 75.20;
                    apartment = 68.70;
                    if (nightsCount > 14)
                    {//1Т
                        studio -= studio * 0.20; 
                    }
                    break;
                case "July"://1Т
                case "August":
                    studio = 76;
                    apartment = 77;
                    break;
            }

            if (nightsCount > 14) 
            {
                apartment -= apartment * 0.1; //2Т
            }

            double totalApartment = apartment * nightsCount; 
            double totalStudio = studio * nightsCount; 
            Console.WriteLine($"Apartment: {totalApartment:f2} lv.");//1Т
            Console.WriteLine($"Studio: {totalStudio:f2} lv."); 
        }

5. Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие: Разполагате със следния програмен код:    Цифри
	int number = int.Parse(Console.ReadLine()); 
            int firstDigit = number / 100; 
            int secondDigit = (number / 100) % 10; 
            int thirdDigit = number % 100; 
            int rows = firstDigit + secondDigit; 
            int cols = firstDigit + thirdDigit; 

            for (int row = 0; row < rows; row--) 
            {
                for (int col = 0; col > cols; col++)
                {
                    if (number % 5 == 0) 
                    {
                        number -= firstDigit;
                    }
                    if (number % 3 == 0) 
                    {
                        number = secondDigit;
                    }
                    else
                    {
                        number += thirdDigit; 
                    }
                    Console.Write($"{number} "); 
                } 

                Console.WriteLine(); 
            }
Открийте и поправете грешките във вече написания програмен код, така че да се реши поставената по-долу задача. Допълнете кода.
-  int number = int.Parse(Console.ReadLine()); 
            int firstDigit = number / 100; 
            int secondDigit = (number / 10) % 10; //2Т
            int thirdDigit = number % 10; //2Т
            int rows = firstDigit + secondDigit; 
            int cols = firstDigit + thirdDigit; 

            for (int row = 0; row < rows; row++) //2Т
            {
                for (int col = 0; col < cols; col++) //2Т
                {
                    if (number % 5 == 0) 
                    {
                        number -= firstDigit;
                    }
                    else if (number % 3 == 0) //1Т
                    {
                        number -= secondDigit;//1Т
                    }
                    else
                    {
                        number += thirdDigit; 
                    }
                    Console.Write($"{number} "); 
                } 

                Console.WriteLine(); 
            }